#+STARTUP: overview
* use-package
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC
** quelpa
#+begin_src emacs-lisp
  (use-package quelpa
    :ensure t
    :defer t
    :custom
    (quelpa-update-melpa-p nil "Don't update the MELPA git repo."))
#+end_src
** ese-package-quelpa
#+begin_src emacs-lisp
  (use-package quelpa-use-package
    :ensure t
    :init (setq quelpa-use-package-inhibit-loading-quelpa t))
#+end_src
** use-package custom-update
To be able to update lists in /custom/
#+BEGIN_SRC emacs-lisp
  (use-package use-package-custom-update
    :quelpa
    (use-package-custom-update
     :repo "a13/use-package-custom-update"
     :fetcher github
     :version original))
#+END_SRC
* interface tweaks
#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package emacs
    :ensure t
    :config
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (global-font-lock-mode 1)
    (global-auto-revert-mode t)
    (global-set-key (kbd "C-x k") 'windmove-up)
    (global-set-key (kbd "C-x j") 'windmove-down)
    (global-set-key (kbd "C-x h") 'windmove-left)
    (global-set-key (kbd "C-x l") 'windmove-right)
    (setq default-input-method 'russian-computer)
    (global-set-key (kbd "C-q") 'toggle-input-method)
    <<narrow-commands>>
    (setq-default indent-tabs-mode nil)
    (setq show-trailing-whitespace t
          ac-auto-show-menu 0.3
          whitespace-style '(face tabs tab-mark trailing)
          split-width-threshold 9999
          inhibit-startup-screen t
          frame-inhibit-implied-resize t
          initial-scratch-message nil))
#+END_SRC
** narrow commands
#+NAME: narrow-commands
#+BEGIN_SRC emacs-lisp :tangle no
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
#+END_SRC
* paths
** backups
#+BEGIN_SRC emacs-lisp
  (use-package files
    :custom
    (backup-directory-alist
     `(("." . ,(locate-user-emacs-file "backups"))))
    (auto-save-file-name-transforms
     `((".*" ,(locate-user-emacs-file "backups") t)))
    (auto-save-list-file-prefix
     (locate-user-emacs-file "backups/")))
#+END_SRC
** custom
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :after files
    :config
    (setf custom-file (locate-user-emacs-file "custom.el"))
    (add-hook 'after-init-hook
              (lambda () (load custom-file t))))
#+END_SRC
* evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode)
    (fset 'evil-visual-update-x-selection 'ignore)
    :custom
    (evil-undo-system 'undo-tree)
    (evil-search-module 'evil-search)
    (evil-want-C-i-jump nil))
#+END_SRC
** treat underscore as a part of a word (in code)
Changing underscore to part of a word globally affects highlighting in
text modes which leads to hiccups in message-mode. I only need
"underscore as word" for code where I usually use snake_case
identifiers.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda () (modify-syntax-entry ?_ "w")))
#+END_SRC
** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :config (global-undo-tree-mode t))
#+end_src
* org
** capture templates
#+NAME: my-org-capture-templates
#+BEGIN_SRC emacs-lisp :tangle no
    (org-capture-templates `(("t" "Task to inbox" entry  (file "inbox.org")
                              ,(concat "* TODO %?\n"
                                              "/Entered on/ %U"))
                             ("i" "Idea to inbox" entry  (file "inbox.org")
                              ,(concat "* IDEA %?\n"
                                              "/Entered on/ %U"))))
#+END_SRC
** modules
#+NAME: my-org-modules
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'org-modules 'org-habit)
#+END_SRC
*** org-habits custom
#+NAME: org-habits-custom
#+BEGIN_SRC emacs-lisp :tangle no
  (org-habit-graph-column 50)
#+END_SRC
*** agenda custom
#+NAME: agenda-custom
#+BEGIN_SRC emacs-lisp :tangle no
      (org-agenda-span 1)
      (org-sort-agenda-notime-is-late nil)
      (org-agenda-tags-todo-honor-ignore-options t)
      (org-agenda-todo-ignore-time-comparison-use-seconds t)
      (org-agenda-skip-scheduled-if-done t)
      (org-priority-default 65)
      (org-agenda-time-grid
       '(nil
         (800 1000 1200 1400 1600 1800 2000)
         "......" "----------------"))
      (Ð¾rg-agenda-todo-ignore-timestamp 'future)
      (org-agenda-todo-ignore-scheduled 'future)
      (org-agenda-custom-commands
          '(("j" "Jedi task list"
             ((tags-todo "TODO=\"TODO\"+PRIORITY=\"A\""
                     ((org-agenda-prefix-format "  %-12:c")
                     (org-agenda-overriding-header "\nToday")
                     (org-agenda-todo-ignore-scheduled 'all)
                     ))
              (agenda ""
                   ((org-agenda-priority-down)
                   ))
              (tags "Closed>=\"<today>\""
                        ((org-agenda-prefix-format "  %?-12t% s")
                        (org-agenda-overriding-header "Done")))))
            ))
#+END_SRC
** bind
#+NAME: org-bind-keys
#+BEGIN_SRC emacs-lisp :tangle no
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c i" . org-capture-inbox))
#+END_SRC
** after init hook
#+name: org-after-init
#+begin_src emacs-lisp :tangle no
  (setq org-startup-indented t)
  (define-key org-mode-map (kbd "<C-tab>") 'vimacs/org-narrow-to-subtree)
  (define-key org-mode-map (kbd "<M-tab>") 'vimacs/org-widen-from-subtree)
#+end_src
** use package
#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package org
    :ensure org-plus-contrib
    :init
    <<vimacs/subtree>>
    :bind
    <<org-bind-keys>>
    :mode ("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode)
    :init
    (setq org-publish-project-alist
      '(("org"
         :base-directory "~/roam/"
         :publishing-function org-html-publish-to-html
         :publishing-directory "~/kaptoxa.github.io/"
         :section-numbers nil
         :with-toc 2
         :headline-levels 1
         :viewport nil
         :with-date nil
         :with-author 1
         :with-fixed-width 80
         :with-emphasize 1
         :style "<link rel=\"stylesheet\"
                href=\"style.css\"
                type=\"text/css\"/>")))
    (setq org-hide-emphasis-markers t
          org-log-done t
          org-clock-persist 'history
          org-directory "~/Dropbox/org"
          org-agenda-files (list org-directory)
          org-outline-path-complete-in-steps nil
          org-todo-keywords '((sequence "TODO(t)" "HOLD(h!)" "|" "DONE(d)")
                              (sequence "IDEA(i)" "PROJ(p!)" "|" "WIN(w)")))
    (add-hook 'after-init-hook (defun org-after-init ()
                                 <<org-after-init>>))
    <<my-org-modules>>
    :config
    (org-load-modules-maybe t)
    (unbind-key "C-'" org-mode-map) ; Free this one for avy
    :custom
    <<org-habits-custom>>
    <<agenda-custom>>
    <<my-org-capture-templates>>
    (org-use-sub-superscripts nil)
    (org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
    (org-confirm-babel-evaluate nil)
    (org-enforce-todo-dependencies t)
    (org-extend-today-until 3)
    (org-hide-leading-stars t)
    (org-log-into-drawer "LOGBOOK")
    (org-outline-path-complete-in-steps nil)
    (org-refile-use-outline-path 'file)
    (org-archive-location "archive/%s::")
    (org-return-follows-link t)
    (org-hide-blocks-startup t)
    (org-refile-targets
     '((nil :maxlevel . 3)
       (org-agenda-files :maxlevel . 3)))
    :custom-face
    (org-mode-line-clock ((t (:background "grey75" :foreground "red" :box (:line-width -1 :style released-button))))))
#+END_SRC
** calendar
#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :ensure nil
    :commands (calendar)
    :custom (calendar-week-start-day 1))
#+END_SRC
** auto-close archive
Automatically close archive file after archiving a subtree
Unless it was open before archiving
#+BEGIN_SRC emacs-lisp
  (defun aragaer/auto-close-archive (orig-func &rest r)
    (let* ((location (org-archive--compute-location org-archive-location))
           (afile (car location))
           (abuffer (get-file-buffer afile)))
      (apply orig-func r)
      (when (not abuffer)
        (let ((abuffer (get-file-buffer afile)))
          (save-some-buffers t abuffer)
          (kill-buffer abuffer)))))

  (advice-add 'org-archive-subtree :around #'aragaer/auto-close-archive)
#+END_SRC

Also close all agenda files that were opened when updating org-id locations.
#+begin_src emacs-lisp
  (defun aragaer/close-after-id-update (orig-func &rest r)
    (let ((to-close (seq-remove #'get-file-buffer (org-agenda-files t org-id-search-archives))))
      (apply orig-func r)
      (mapcar (lambda (f) (kill-buffer (get-file-buffer f))) to-close)))

  (advice-add 'org-id-update-id-locations :around #'aragaer/close-after-id-update)
#+end_src
** reopen "nohide" blocks
I want my 'src' blocks to be hidden by default but their results
wrapped in blocks should be visible. For that I use ':wrap nohide'.
#+begin_src emacs-lisp
  (defun aragaer/show-nohide (&rest r)
    (let* ((e (org-element-at-point))
           (subtype (org-element-property :type e)))
      (when (equal subtype "nohide")
        (org-hide-block-toggle nil t e))))

  (advice-add
   'org-hide-block-all
   :after
   (lambda (&rest r) (org-block-map #'aragaer/show-nohide))
   '((name . "show-nohide")))
#+end_src
* utils
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
** vdiff
#+BEGIN_SRC emacs-lisp
  (use-package vdiff
    :ensure t
    :custom
    (vdiff-truncate-lines t)
    :config
    (define-key vdiff-mode-map (kbd "C-c") vdiff-mode-prefix-map)
    (evil-define-key 'normal vdiff-mode-map "," vdiff-mode-prefix-map))
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :config
      (ivy-mode t)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) "))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status))
    :custom
    (magit-log-margin '(t age-abbreviated magit-log-margin-width t 7))
    :init
    (require 'magit-git)
    (require 'magit-process))
#+END_SRC
** epa-file
#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :config (epa-file-enable))
#+END_SRC
** project.el
#+begin_src emacs-lisp
  (use-package project
  :ensure t
  :bind-keymap
  ("C-c p" . project-prefix-map)
  :config
  (setq project-switch-commands
        '((?f "Find file" project-find-file)
          (?g "Magit status" magit-status))))
#+end_src
** emacs-everywhere
#+begin_src emacs-lisp
  (use-package emacs-everywhere
    :ensure t)
#+end_src
** helpers
Emacs lisp helper functions.

Timestamp-ids are used to uniquely identify things.
#+begin_src emacs-lisp
(defun tsid (&optional time)
  "Return timestamp-id."
  (format-time-string "%Y%m%d%H%M%S" time "UTC"))
#+end_src
** org-roam
#+begin_src emacs-lisp :noweb yes
    (use-package org-roam
      :ensure t
      :init
      (setq org-roam-v2-ack t)
      (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n"))))
  ;    (setq org-roam-capture-templates
  ;        '(("d" "default" plain
  ;           "%?"
  ;           :if-new (file+head "%<%Y%m%d%H%M%S>.org" "#+title: ${title}")
  ;
  ;           :unnarrowed t)))
      :config
      (setq org-roam-directory (file-truename "~/roam"))
      (setq org-roam-dailes-directory (file-truename "~/roam/daily/"))
      <<org-roam-slip-boxes>>
      :hook
      (after-init . org-roam-setup)
      :custom
      (org-roam-db-update-method 'immediate)
      :bind ((("C-c n l" . org-roam-buffer-toggle)
              ("C-c n c" . org-roam-capture)
              ("C-c n f" . org-roam-node-find)
              ("C-c n n" . org-roam-new-node)
              ("C-c n d" . org-roam-new-node-default)
              ("C-c n a" . org-roam-new-node-areas)
              ("C-c n j" . org-roam-dailies-capture-today))
             :map org-mode-map
             (("C-c n i" . org-roam-node-insert)
              )))
#+end_src
** org-roam-slip-boxes
#+name: org-roam-slip-boxes
#+begin_src emacs-lisp :tangle no
      (defconst slip-boxes
        '(;; Default slip-box with permanent notes
          ("d" "default"     ""         "${capture-tsid}")
          ;; Areas of responsibility notes
          ("a" "areas"        "areas/"    "${capture-tsid}")
           ;; Archive
          ("o" "archive"        "archive/"    "${capture-tsid}")
          ;; Literature notes
          ("b" "bibliograpic" "biblio/" "${citekey}" "#+LAST_MODIFIED: \n#+DATE: %<%Y-%m-%d>\n"))
        "My slip boxes. Format is a list of (capture-key name directory filename extra-template).")
      ;; one capture template per slip-box
      (setq org-roam-capture-templates
            (mapcar (lambda (x)
                      (let ((key  (nth 0 x))
                            (name (nth 1 x))
                            (dir  (nth 2 x))
                            (filename (nth 3 x))
                            (extra-template (nth 4 x)))
                        `(,key ,name plain "%?"
                               :if-new (file+head
                                        ,(concat dir filename ".org")
                                        ,(concat "#+TITLE: ${title}\n"
                                                 extra-template))
                               :immediate-finish t
                               :unnarrowed t)))
                    slip-boxes))

      (defun capture-tsid (node)
        "A hack definition to workaround that org-roam passes a node argument."
        (tsid))

      (defun org-roam-new-node (&optional keys)
      (interactive)
      (org-roam-capture-
       :keys keys
       :node (org-roam-node-create :title "")
       :props '(:finalize find-file)))

    (defun org-roam-new-node-default ()
      (interactive)
      (org-roam-new-node "d"))

    (defun org-roam-new-node-areas ()
      (interactive)
      (org-roam-new-node "a"))

    (defun move-to-slip-box (slip-box)
    "Move file to specified SLIP-BOX."
    (interactive (list (completing-read "Move to slip-box: "
                                        (mapcar (lambda (x) (nth 2 x)) slip-boxes))))
    (let* ((filename (buffer-file-name))
           (directory (file-name-directory filename))
           (name (file-name-nondirectory filename))
           (new-name (f-join org-roam-directory slip-box name)))
      (roam-rename new-name)))

  ;; TODO: with org-roam-v2 this probably can be simplified
  (defun roam-rename (new-name)
    "Move file to NEW-NAME. `org-roam' takes care of adjusting all links."
    (let ((filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting file!" (buffer-name)))
      (rename-file filename new-name)
      (set-visited-file-name new-name t)
      (revert-buffer t t t)
      ;; trigger save-buffer for org-roam to regenerate `org-roam-buffer'.
      (set-buffer-modified-p t)
      (save-buffer)))

  (setq org-roam-node-display-template "${hierarchy:*} ${tags:10}")

  (cl-defmethod org-roam-node-filetitle ((node org-roam-node))
    "Return the file TITLE for the node."
    (org-roam-get-keyword "TITLE" (org-roam-node-file node)))

  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    "Return the hierarchy for the node."
    (let ((title (org-roam-node-title node))
          (olp (org-roam-node-olp node))
          (level (org-roam-node-level node))
          (directories (org-roam-node-directories node))
          (filetitle (org-roam-node-filetitle node)))
      (concat
       (if directories (format "(%s) " directories))
       (if (> level 0) (concat filetitle " > "))
       (if (> level 1) (concat (string-join olp " > ") " > "))
       title)))

  (cl-defmethod org-roam-node-directories ((node org-roam-node))
    (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (string-join (f-split dirs) "/")
      nil))
#+end_src
** org-download
#+begin_src emacs-lisp
  (use-package org-download
    :custom
    (org-download-method 'directory)
    (org-download-image-dir nil)
    (org-download-heading-lvl nil))
#+end_src
** org-roam-ui
#+begin_src emacs-lisp :noweb yes
  (use-package websocket
      :after org-roam)
  
  (use-package org-roam-ui
      :load-path "elpa/org-roam-ui"
      :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
      :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))
#+end_src
* helpers
** google translate
#+BEGIN_SRC emacs-lisp
(require 'popup)
(require 'google-translate)
(require 'google-translate-default-ui)
(global-set-key "\C-ct" 'google-translate-at-point)
(global-set-key "\C-cT" 'google-translate-query-translate)
(setq google-translate-default-source-language "en")
(setq google-translate-default-target-language "ru")
(defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
(setq google-translate-backend-method 'curl)
#+END_SRC
** org-drill
#+begin_src emacs-lisp
  (use-package org-drill
    :custom
    (org-drill-learn-fraction 0.3))
#+end_src
** org-pomodoro
#+begin_src emacs-lisp
(use-package org-pomodoro
    :ensure t
    :bind
    ("C-c C-x C-i" . org-pomodoro)
    :config
    (defun org-pomodoro-notify (title message)
    (let*
            ((toast "toast")
            (t-title (concat " -t \"" title))
            (t-message (concat "\" -m \"" message "\""))
            (t-image (concat " -p \"C:\\Program Files\\emacs\\x86_64\\share\\icons\\hicolor\\128x128\\apps\\emacs.png\""))
            (my-command (concat toast t-title t-message t-image)))
        (call-process-shell-command my-command))))
#+end_src

* modes
** feature-mode
#+BEGIN_SRC emacs-lisp
  (use-package feature-mode
    :ensure t)
#+END_SRC
** my-writing-mode
#+BEGIN_SRC emacs-lisp
  (define-derived-mode my-writing-mode org-mode "my-writing"
    (setq olivetti-body-width 120)
    (olivetti-mode t))
#+END_SRC
** hooks
*** prog-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'whitespace-mode)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC
*** golang
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook '(lambda ()
                             (setq indent-tabs-mode t)
                             (setq tab-width 4)))
#+END_SRC
*** octave
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
#+END_SRC
*** changelog
#+BEGIN_SRC emacs-lisp
  (rassq-delete-all 'change-log-mode auto-mode-alist)
#+END_SRC
